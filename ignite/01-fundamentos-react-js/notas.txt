# para criar o projeto com vite
npm create vite@latest

# limpeza do projeto template
retirar da pasta src os arquivos .css e .svg
abrir o main.jsx e retirar os imports
abrir o app.jsx e remover todo o conteúdo dentro do return

# conceito de componentes no react
desacoplar pedaços da interface que se repetem várias vezes inclusive com informações diferentes

# jsx - javascript + xml

# o que é um componente
uma função javascript que retorna HTML

# default export
function Post() {
    return(
        <p>Post</p>
    )
}

export default Post

# named exports
export function Post() {
    return(
        <p>Post</p>
    )
}

* nesse caso vc precisa importar usando {}
import { Post } from "./Post"

# conceito propriedades (atributos de um componente)
informações que a gente pode passar para nossos componentes

# css modules
arquivo css que fica atrelado ao componente utiliza Nome.module.css

# padrao de unidade relativa para fontes
1rem = 16px

# como pensar a montagem do componente
- html, estilização e funcionamento

# em que momento eu crio um componente
- quando muitos elementos se repetem com mesmas caracteristicas (visual, comportamento, etc)
- quando vc consegue tirar algo de um componente maior sem mudar sua funcionalidade

# desestruturar props
consegue extrair valores de um objeto
const user = { name: Anderson }
pra recuperar o valor do nome de dentro do objeto vc usa:
const { name } = user

# diferença entre forEach e map
o .forEach não possui retorno enquanto que o .map possui retorno

# conceito de estado no react
- variaveis que eu quero que o componente monitore e quando mude o react mostre o resultado atualizado

# porque a key no react é unica?
existem 3 momentos em que um componente é renderizado novamente no react
- quando altera o estado
- quando altera a propriedade
- quando um componente pai é renderizado novamente

# todos eventos de botão (onClick, onSubmit, etc) precisam receber como valor uma função e nunca a execução de uma função.
função: onClick(handleAlgumaCoisa)
execução da função: onClick(setLikeCount(likeCount + 1);)

# closures
sempre que vc for atualizar uma informação e ela depende do valor anterior faça usando uma função.
setLikeCount((state) => {
    return state + 1;
});